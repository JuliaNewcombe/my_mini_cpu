module sel_encode(input [31:0] instr, input Gra, Grb, Grc, Rin, Rout, BAout, 
						output [4:0] opcode, output [31:0] C_sign_ext, output [15:0] InReg, OutReg);
						
	wire to_decode = (instr[26:23] & {4{Gra}} | instr[22:19] & {4{Grb}} | instr[18:15] & {4{Grc}});
	wire decode_out;
	// 4:16 decoder logic
	always @ (to_decode) begin
				case (to_decode)
						4'b0000 : decode_out <= 16'h0001;     
						4'b0001 : decode_out <= 16'h0002;   
						4'b0010 : decode_out <= 16'h0004; 
						4'b0011 : decode_out <= 16'h0008;  
						4'b0100 : decode_out <= 16'h0010;    
						4'b0101 : decode_out <= 16'h0020;   
						4'b0110 : decode_out <= 16'h0040;
						4'b0111 : decode_out <= 16'h0080;    
						4'b1000 : decode_out <= 16'h0100;    
						4'b1001 : decode_out <= 16'h0200;    
						4'b1010 : decode_out <= 16'h0400;   
						4'b1011 : decode_out <= 16'h0800;  
						4'b1100 : decode_out <= 16'h1000;  
						4'b1101 : decode_out <= 16'h2000;    
						4'b1110 : decode_out <= 16'h4000;   
						4'b1111 : decode_out <= 16'h8000; 
				endcase
				opcode = instr[31:27];
				InReg = {16{Rin}} & decode_out;
				OutReg = ({16{Rout}} | {16{BAout}}) & decode_out;
				C_sign_ext = {{13{instr[18]}}, instr[18:0]};
				
endmodule
